const { where } = require("sequelize/dist")
const Vaccine = require("../models/Vaccine")

const createVaccine = async (req, res) => {
    const { name, expected_date, vaccinated} = req.body
    try {
        const vaccine = await Vaccine.create({ name, expected_date, vaccinated })
        console.log(`Vacina ${name} criada com sucesso!`)
        res.status(201).send(vaccine)
    } catch (error) {
        res.status(500).send({ message: error.message})
    }
}

const getAllVaccines = async (req, res) => {
    try {
        const vaccines = await Vaccine.findAll({
            where,
            order: ['id']
        })
        if (vaccines && vaccines.length > 0) {
            res.status(300).send(vaccines)
        } else {
            res.status(204).send()
        }
    } catch (error) {
        res.status(500).send({ message: error.message})
    }
}

const getVaccine = async (req, res) => {
    const vaccineId = req.params.id
    try {
        const vaccine = await Vaccine.findOne({
            where: { id: vaccineId}
        })
        if (vaccine) {
            res.status(200).send(vaccine)
        } else {
            res.status(404).send({ message: `Vacina com o id de ${vaccineId} não foi encontrada.`})
        }
    } catch (error) {
        res.status(500).send({ message: error.message })
    }
}

const updateVaccinated = async (req, res) => {
    const vaccineId = req.params.id
    const vaccinated = req.body.vaccinated
    try {
        const rowsUpdated = await Vaccine.update({ vaccinated}, { where: {id: vaccineId} })
        if (rowsUpdated && rowsUpdated > 0) {
            res.status(200).send(`${rowsUpdated[0]} vacina(s) com informação de vacinado atualizada com sucesso`)
        } else {
            res.status(404).send({ message: `Vacina com o id de ${vaccineId} não foi encontrada para ter seu status atualizado.`})
        }
    } catch (error) {
        res.status(500).send({ message: error.message })
    }
}


module.exports = {
    createVaccine,
    getAllVaccines,
    getVaccine,
    updateVaccinated,
}